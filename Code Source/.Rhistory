hyperCube[,2] <- 30 + 45*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,3] <- 50 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,4] <- -25 + 50*sample(size = length(grille), grille, replace = FALSE)
find_min_distance(hyperCube)[1]
grille <- seq(0,1,1/(n-1))
hyperCube <- matrix(,length(grille),d)
hyperCube[,1] <- 20 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,2] <- 30 + 45*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,3] <- 50 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,4] <- -25 + 50*sample(size = length(grille), grille, replace = FALSE)
find_min_distance(hyperCube)[1]
grille <- seq(0,1,1/(n-1))
hyperCube <- matrix(,length(grille),d)
hyperCube[,1] <- 20 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,2] <- 30 + 45*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,3] <- 50 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,4] <- -25 + 50*sample(size = length(grille), grille, replace = FALSE)
find_min_distance(hyperCube)[1]
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(j) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
print(i_min)
X[i_min,] <- (j[i_min]*X[i_min,] + w)/(j[i_min]+1)
j[i_min] <- j[i_min] + 1
}
## TP1, recherche du meilleur plan d'expérience
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
print(i_min)
X[i_min,] <- (j[i_min]*X[i_min,] + w)/(j[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
w-X[1,]
dist_w <- norm_vec(w-X[i,])
norm_vec <- function(x) sqrt(sum(x^2))
dist_w <- norm_vec(w-X[i,])
dist_w <- norm_vec(w-X[1,])
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
print(i_min)
X[i_min,] <- (j[i_min]*X[i_min,] + w)/(j[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
dist_w <- norm_vec(w-X[i,])
dist_w <- norm_vec(w-X[1,])
## TP1, recherche du meilleur plan d'expérience
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
print(i)
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
print(i_min)
X[i_min,] <- (j[i_min]*X[i_min,] + w)/(j[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
View(X)
## TP1, recherche du meilleur plan d'expérience
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
print(i)
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
print(i_min)
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
## TP1, recherche du meilleur plan d'expérience
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
print(i)
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
## TP1, recherche du meilleur plan d'expérience
# Tesselation de Voronoi
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
}
find_min_distance(hyperCube)[1]
find_min_distance(X)[1]
d <- 4
n <- 40
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
print(find_min_distance(X)[1])
}
View(X)
View(X)
## TP1, recherche du meilleur plan d'expérience
# Fonctions générales
swap <- function(M, i1, j1, i2, j2)
{
temp <- M[i2, j2]
M[i2,j2] <- M[i1, j1]
M[i1, j1] <- temp
return(M)
}
find_min_distance <- function(M)
{
distances <- as.matrix(dist(M, diag=TRUE, upper=TRUE))
i_min <- 0
j_min <- 0
min <- max(distances)
for(i in 2:nrow(distances))
{
for(j in 1:(i-1))
{
if(distances[i,j] < min)
{
i_min <- i
j_min <- j
min <- distances[i,j]
}
}
}
return(c(min, i_min, j_min))
}
# Tesselation de Voronoi
d <- 4
n <- 40
hyperCube <- matrix(,length(grille),d)
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
hyperCube[,1] <- 20 + 30*hyperCube[,1]
hyperCube[,2] <- 30 + 45*hyperCube[,2]
hyperCube[,3] <- 50 + 30*hyperCube[,3]
hyperCube[,4] <- -25 + 50*hyperCube[,4]
print(find_min_distance(hyperCube)[1])
}
swap <- function(M, i1, j1, i2, j2)
{
temp <- M[i2, j2]
M[i2,j2] <- M[i1, j1]
M[i1, j1] <- temp
return(M)
}
find_min_distance <- function(M)
{
distances <- as.matrix(dist(M, diag=TRUE, upper=TRUE))
i_min <- 0
j_min <- 0
min <- max(distances)
for(i in 2:nrow(distances))
{
for(j in 1:(i-1))
{
if(distances[i,j] < min)
{
i_min <- i
j_min <- j
min <- distances[i,j]
}
}
}
return(c(min, i_min, j_min))
}
## TP1, recherche du meilleur plan d'expérience
# Fonctions générales
swap <- function(M, i1, j1, i2, j2)
{
temp <- M[i2, j2]
M[i2,j2] <- M[i1, j1]
M[i1, j1] <- temp
return(M)
}
find_min_distance <- function(M)
{
distances <- as.matrix(dist(M, diag=TRUE, upper=TRUE))
i_min <- 0
j_min <- 0
min <- max(distances)
for(i in 2:nrow(distances))
{
for(j in 1:(i-1))
{
if(distances[i,j] < min)
{
i_min <- i
j_min <- j
min <- distances[i,j]
}
}
}
return(c(min, i_min, j_min))
}
# Tesselation de Voronoi
d <- 4
n <- 40
hyperCube <- matrix(,length(grille),d)
X <- matrix(, nrow=n, ncol=d)
poids <- rep(1,n)
norm_vec <- function(x) sqrt(sum(x^2))
for (i in 1:n)
{
X[i,] <- runif(d,0,1)
}
while(min(poids) < 1000)
{
w <- runif(d,0,1)
w_min <- norm_vec(w-X[1,])
i_min <- 1
for(i in 1:n)
{
dist_w <- norm_vec(w-X[i,])
#w_min <- dist_w
if(dist_w < w_min)
{
i_min <- i
w_min <- dist_w
}
}
X[i_min,] <- (poids[i_min]*X[i_min,] + w)/(poids[i_min]+1)
poids[i_min] <- poids[i_min] + 1
hyperCube[,1] <- 20 + 30*X[,1]
hyperCube[,2] <- 30 + 45*X[,2]
hyperCube[,3] <- 50 + 30*X[,3]
hyperCube[,4] <- -25 + 50*X[,4]
print(find_min_distance(hyperCube)[1])
}
grille <- seq(0,1,1/(n-1))
hyperCube <- matrix(,length(grille),d)
hyperCube[,1] <- 20 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,2] <- 30 + 45*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,3] <- 50 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,4] <- -25 + 50*sample(size = length(grille), grille, replace = FALSE)
find_min_distance(hyperCube)[1]
for(k in 1:1000)
{
pt1 <- find_min_distance(hyperCube)[2]
pt2 <- find_min_distance(hyperCube)[3]
min <- find_min_distance(hyperCube)[1]
pt_critique <- sample(c(pt1,pt2), size=1)
col_aleatoire <- sample(seq(1,d), size=1)
point_aleatoire <- sample(seq(1,n), size=1)
min_new <- find_min_distance(swap(hyperCube,
pt_critique,
col_aleatoire,
point_aleatoire,
col_aleatoire))[1]
if(min_new > min)
{
hyperCube <- swap(hyperCube,
pt_critique, col_aleatoire,
point_aleatoire,col_aleatoire)
print(min)
}
#   else
#   {
#     if(rbinom(1,1,exp(min_new-min)/0.1) == 1)
#     {
#       hyperCube <- swap(hyperCube,
#                         pt_critique, col_aleatoire,
#                         point_aleatoire,col_aleatoire)
#     }
#   }
}
hyperCube <- lhsDesign(40,4)
hyperCube <- hyperCube$design
hyperCube[,1] <- 20 + 30*hyperCube[,1]
hyperCube[,2] <- 30 + 45*hyperCube[,2]
hyperCube[,3] <- 50 + 30*hyperCube[,3]
hyperCube[,4] <- -25 + 50*hyperCube[,4]
find_min_distance(hyperCube)[1]
View(hyperCube)
grille <- seq(0,1,1/(n-1))
hyperCube <- matrix(,length(grille),d)
hyperCube[,1] <- 20 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,2] <- 30 + 45*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,3] <- 50 + 30*sample(size = length(grille), grille, replace = FALSE)
hyperCube[,4] <- -25 + 50*sample(size = length(grille), grille, replace = FALSE)
find_min_distance(hyperCube)[1]
View(hyperCube)
for(k in 1:1000)
{
pt1 <- find_min_distance(hyperCube)[2]
pt2 <- find_min_distance(hyperCube)[3]
min <- find_min_distance(hyperCube)[1]
pt_critique <- sample(c(pt1,pt2), size=1)
col_aleatoire <- sample(seq(1,d), size=1)
point_aleatoire <- sample(seq(1,n), size=1)
min_new <- find_min_distance(swap(hyperCube,
pt_critique,
col_aleatoire,
point_aleatoire,
col_aleatoire))[1]
if(min_new > min)
{
hyperCube <- swap(hyperCube,
pt_critique, col_aleatoire,
point_aleatoire,col_aleatoire)
print(min)
}
#   else
#   {
#     if(rbinom(1,1,exp(min_new-min)/0.1) == 1)
#     {
#       hyperCube <- swap(hyperCube,
#                         pt_critique, col_aleatoire,
#                         point_aleatoire,col_aleatoire)
#     }
#   }
}
memory.limit()
memory.size()
setwd("~/GitHub/Projet_Industriel/Code Source")
setwd("~/GitHub/Projet_Industriel/Code Source")
setwd("~/GitHub/Projet_Industriel/Code Source")
setwd("C:\Users\Grégoire MASSOT\Documents\GitHub\Projet_Industriel\Code Source")
setwd("C:/Users/Grégoire MASSOT/Documents/GitHub/Projet_Industriel/Code Source")
donnees_hcl <- read.csv2(file = "base_ano.txt",header = TRUE, sep="\t")
donnees_hcl <- read.csv2(file = "base_ano.txt",header = TRUE, sep="\t")
donnees_hcl <- donnees_hcl[donnees_hcl$duree >= 1 & donnees_hcl$duree <= 30 ,]
